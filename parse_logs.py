__author__ = 'liu'

import re
def parse_flash_log(log_fn):
    """Parse the log file generated by FLASH, and return the total reads and combined reads
    :param log_fn:
    :return: total, combined
    """
    total = 0
    combined = 0
    pct = 0
    with open(log_fn) as f_in:
        for line in f_in:
            if "Total reads" in line:
                total = [int(s) for s in str.split() if s.isdigit()][0]
            elif "Combined reads" in line:
                combined = [int(s) for s in str.split() if s.isdigit()][0]
            else:
                continue
    return total, combined

def parse_trim_log(log_fn):
    """
    Parse the PCR primer triming
    :param log_fn:
    :return:
    """
    total = 0
    trimmed = 0
    with open(log_fn) as f_in:
        for line in f_in:
            if "   Processed reads" in line:
                total = [int(s) for s in str.split() if s.isdigit()][0]
            elif "     Trimmed reads" in line:
                trimmed = [int(s) for s in str.split() if s.isdigit()][0]
            else:
                continue
    return total, trimmed



def parse_biom_summary(fn):
    """
    Parse the biom summary file
    :param fn: biom_summary.txt
    :return: min, mean, max, sample coverage
    """
    sample_cnt = {}
    min_cnt = 0
    median_cnt = 0
    max_cnt = 0
    with open(fn) as f_in:
        sample_line = False
        for line in f_in:
            nums =  re.findall("\d+.\d+", line)
            if "Counts/sample detail:" in line: # all line follow are sample counts
                sample_line = Ture
            elif   "Min:" in line:
                min_cnt =nums[0]
            elif "Max:" in line:
                max_cnt = nums[0]
            elif "Median" in line:
                median_cnt = nums[0]
            elif sample_line is True:
                fields = line.split(":")
                sampleID = fields[0].strip()
                sampleCount = fields[1]
                sample_cnt[sampleID] = sampleCount
    return min_cnt, median_cnt, max_cnt, sample_cnt


def parse_split_libraries(log_fn):
    """
    Parse log file from split_libraries_fastq.py
    :param log_fn:
    :return:
    """
    mat = {}
    with open(log_fn) as f_in:
        for line in f_in:
            if line == "---": #end of one section
                mat[sampleID] = {"Total": total,
                                 "Too Short": short,
                                 "After": filtered,
                                 "Median length": med_len}
            elif "Total number of input sequences" in line:
                total = [int(s) for s in str.split() if s.isdigit()][0]
            elif "Read too short after quality truncation" in line:
                short = [int(s) for s in str.split() if s.isdigit()][0]
            elif "Total number seqs written" in line:
                filterd = [int(s) for s in str.split() if s.isdigit()][0]
            elif "Median sequence length" in line:
                med_len = re.findall("\d+.\d+", line)[0]
            else: # find the sample id
                fields = line.split()
                if len(fields) == 2:
                    sampleID = fields[0]
    return mat

def


