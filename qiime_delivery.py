#!/mnt/software/epd/bin/ipython

import os
import getopt
import sys
import time
import glob
import math
import shutil


script_path = os.path.dirname(os.path.realpath(__file__)) #'/mnt/grl/brc/application/qiime_pipeline.0.1/'
sys.path.append(script_path)



class DeliverQiimeReport(object):
  input = None
  output = None
  help = False



  def main(self):
    try:
      self.get_params()
      self.deliver_report()
      self.remove_seqs()
      print "This delivery is recorded in delivery_log"
    except Exception as e:
      print e
      self.print_help()
      sys.exit()




  def get_params(self):
    letters = 'i:,o:,h'
    keywords = ['input-dir=', 'output-dir=', 'help']
    options, extraparams = getopt.getopt(sys.argv[1:], letters, keywords)
    for o,p in options:
      if o in ['-i', '--input-dir']:
        if not os.path.exists(os.path.abspath(p)):
          raise Exception("Invalid input path")
        self.input = os.path.abspath(p)
      elif o in ['-o', '--output-dir']:
        if not os.path.exists(os.path.abspath(p)):
          os.makedirs(os.path.abspath(p))
          self.output = os.path.abspath(p)
        else:
          raise Exception("Delivery directory already exists. Please specify a unique one.")
      elif o in ['-h', '--help']:
        self.print_help()
        self.help = True
        sys.exit()
      else:
        self.print_help()
        self.help = True
        print o + " is not a valid parameter."
        raise Exception("Improper Input to converter")
    if self.help is False and (self.input is None or self.output is None):
      raise Exception("A required parameter is missing.")
    if not os.path.exists(self.input + "/split_maps/"):
      raise Exception("Mapping files do NOT exist. The report files can't be delivered.")





  def deliver_report(self):
    print "Delivering report files..."
    delivery_list = ['/Workflow.png', '/report.html', '/otus', '/heatmap', '/otu_network', '/taxa_summary', '/arare', '/bdiv']
    log = open(self.input + "/delivery_log", 'w')
    for i in range(0, len(delivery_list)):
      if os.path.exists(self.input + delivery_list[i]):
        os.system("cp -R " + self.input + delivery_list[i] + " " + self.output) # replace mv with cp
        log.write(self.input + delivery_list[i] + " is moved to " + self.output + ".\n")
        print ("  " + self.input + delivery_list[i] + " is moved to " + self.output + ".")
      else:
        log.write(self.input + delivery_list[i] + " does NOT exist.\n")
        print ("  " + self.input + delivery_list[i] + " does NOT exist.")
    log.close()


    
    
    
  def remove_seqs(self):
    print "Removing intermediate sequence files..."
    log = open(self.input + "/delivery_log", 'a')
    
    if os.path.exists(self.input + "/preprocessed_fna/combined.fna"):
      os.remove (self.input + "/preprocessed_fna/combined.fna")
      log.write(self.input + "/preprocessed_fna/combined.fna is removed.\n")
      print ("  " + self.input + "/preprocessed_fna/combined.fna is removed.")
    else:
      log.write(self.input + "/preprocessed_fna/combined.fna does NOT exist.\n")
      print ("  " + self.input + "/preprocessed_fna/combined.fna does NOT exist.")

    path = self.input + "/split_maps/"
    for (path, dirs, maps) in os.walk(path):
      for i in range (0, len(maps)):
	sampleid = maps[i].split("_")[0]
        if os.path.exists(self.input + "/" + sampleid):
          shutil.rmtree (self.input + "/" + sampleid)
          log.write(self.input + "/" + sampleid + " is removed.\n")
          print ("  " + self.input + "/" + sampleid + " is removed.")
        else:
          log.write(self.input + "/" + sampleid + " does NOT exist.\n")
          print ("  " + self.input + "/" + sampleid + " does NOT exist.")
    log.close()

    
    

  def __init__(self):
    self.main()





  def print_help(self):
    print '''
     qiime_delivery.py is to move report files generated by the qiime pipeline to a delivery directory. It also removes intermediate sequence files to save storage.
     Required Parameters:
     (-i, --input-dir) The source of report files, that is an output directory of qiime pipeline.
     (-o, --output-dir) The destination directory where you want the report to be delivered.
     Other Options:
     (-h, --help) Display this help dialogue and exit.
     For complete information about this pipeline, please refer to the manual.
    '''




if(__name__ == "__main__"):
  DeliverQiimeReport()
