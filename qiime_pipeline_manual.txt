Manual for qiime_pipeline_jiang.py
Location: /mnt/grl/brc/application/qiime_pipeline_jiang/
Fenglei Jiang
10/08/2013

The qiime_pipeline_jiang.py runs QIIME v1.7.0 for 16S rRNA metagenomic analysis. It calls QIIME python scripts and qiime_report_jiang.py located in the same directory.

Before running the pipeline, the user needs to create a mapping file that contains metadata of each sample. It's critical that the mapping file is correctlly formatted. The mapping file is a tab-delimited text file. The first line of the mapping file must be a comment header beginning with a pound "#" as in this example:

#SampleID	BarcodeSequence	LinkerPrimerSequence	Treatment	Filename	PairedReads	ReversePrimer	ForPrimerRC	RevPrimerRC	ReadNumber	Description

The columns specified in the header must be in the order of the above example. The user can add more columns between "RevPrimerRC" and "Description" if needed. "ForPrimerRC" and "RevPrimerRC" refers to the reverse compliment sequences of the forward and reverse primers respectively. All sequences must be written in 5' to 3'.

The second line must start with a pound "#" and can be a brief description of the data set or left blank. 

The metadata starts at the third line. No entry can be left blank except the column "BarcodeSequence". Since the "BarcodeSequence" is empty, there should be 2 tabs between "SampleID" and "LinkerPrimerSequence" in the lines of metadata.

After creating the mapping file, the user should check the mapping files by running check_id_map.py and includes the "-b" option. An example mapping file can be found in /mnt/grl/brc/application/qiime_pipeline_jiang/example_map.txt.


The parameters used for analysis are listed below.

    Required Parameters:
    (-i, --input-dir) The input directory containing all the data you want to analyzed. The valid input files are demultiplexed SFF, BAM, FASTQ, and FASTA files.
    (-o, --output-dir) The output directory where you want the results to be located.
    (-m, --map) The tab-delimited qiime mapping file that contains metadata for the samples to be analyzed. The BarcodeSequence column should be empty.

    Optional Parameters:
    (-n, --num_cpus) The number of cores to use for the parallel portions of the pipeline. [default: 2].
    (-l, --min-seq-length) Minimum sequence length, in nucleotides. [default: 200]
    (-L, --max-seq-length) Maximum sequence length, in nucleotides. [default: 1000]
    (-q, --min-qual-score) Min average qual score allowed in reads. [default: 20]
    (-w, --qual_score_window) Enable sliding window test of quality scores. If the average score of a continuous set of w nucleotides falls below the threshold (see -s for default), the sequence is discarded. A good value would be 50. 0 (zero) means no filtering. Must pass a .qual file (see -q parameter) if this functionality is enabled. The behavior for this function is to discard any sequences where a bad window is found. [default: 50]
    (-r, --reference) Reference database for OTU clustering. It should be in fasta format. If a reference is given, pick_open_reference_otus.py runs. If not, pick_de_novo_otus.py runs.

    Fixed Parameters: Some parameters used for analysis are specified in the pipeline script.
    (-b 0) The length of the barcode is fixed as 0, which is used in split_libraries step.
    (-g, --discard_bad_windows) This option discards any sequences where a bad window is found, which is used in split_libraries step.
    (-z truncate_only) This option will remove the primer and subsequent sequence data from the output read and will not alter output of sequences where the primer cannot be found, which is used in split_libraries step.
    (-v) This option runs used in denoise_wrapper step in verbose mode, so that a denoiser.log file containg information about the clustering procedure is output.
    (-e, --seqs_per_sample) Depth of coverage for even sampling. This parameter is generated by the pipeline by picking the minimum number of reads among samples.

    Other options: 
    (-h, --help) Display this help dialogue and exit.


Under the output directory that user specified, the pipeline output the following folders and files:

    split_maps: contains separate mapping files for each sample
    folders named as sampleID in the mapping file: contains sequence files and log files generated in the preprocess steps
    preprocessed_fna: contains individal and combined preprocessed FNA files
    outs: results of otu picking 
    arare: results of alpha rarefaction
    bdiv: results of beta diversity
    report_files: contains the workflow chart of the pipeline
    report.html: the final report of qiime analysis in html format

     qiime_delivery.py is to move report files generated by the qiime pipeline to a delivery directory. To correctly deliver the report files, the structure of the output directory generated by qiime pipeline should not be changed. If the split mapping files are missing, the report files will not be delivered. This script will also leave a log file in the input directory. Please check the log file after running this script to make sure that the delivery is successful.
    (-i, --input-dir) The source of report files, that is an output directory of qiime pipeline.
    (-o, --output-dir) The destination directory where you want the report to be delivered.
    (-h, --help) Display this help dialogue and exit.
    For complete information about this pipeline, please refer to the manual.
    '''
    qiime_pipeline.py runs the qiime pipeline for 16S rRNA metagenomic analysis. It takes demultiplexed SFF, BAM, and FASTQ files from 454, pgm and illumina sequencers.
    Required Parameters:
    (-i, --input-dir) The input directory containing all the data you want to analyzed. 
    (-o, --output-dir) The output directory where you want the results to be located.
    (-m, --map) The tab-delimited qiime mapping file that contains metadata for the samples to be analyzed. The BarcodeSequence column should be empty.
    Optional Parameters:
    (-r, --reference) Reference database for OTU clustering. It should be in fasta format. If a reference is given, pick_open_reference_otus.py runs. If not, pick_de_novo_otus.py runs.
    (-n, --num_cpus) The number of cores to use for the parallel portions of the pipeline. [default: 2]
    (-l, --min-seq-length) Minimum sequence length, in nucleotides. [default: 200]
    (-L, --max-seq-length) Maximum sequence length, in nucleotides. [default: 1000]
    (-q, --min-qual-score) Min average qual score allowed in reads. [default: 20]
    (-w, --qual_score_window) Enable sliding window test of quality scores. If the average score of a continuous set of w nucleotides falls below the threshold, the sequence is discarded.[default: 50]
    (-p, --min_overlap) The minimum required overlap length between two reads to provide a confident overlap. This option is used for merging miseq paied-end reads. [Default: 20bp]
    (-P, --max_overlap) Maximum overlap length expected in approximately 90% of read pairs. This option is used for merging miseq paied-end reads. [Default: 100bp]
    Other options: 
    (-h, --help) Display this help dialogue and exit.
    For complete information about this pipeline, please refer to the manual. 

  def print_help(self):
    print '''
    qiime_report.py is a part of the qiime pipeline for 16S rRNA metagenomic analysis. It can also run by itself, especially for regenerating report or doing additional analyses using a single FNA file that that contains reads of all samples.
    (-i, --input-dir) The input FNA file.
    (-o, --output-dir) The output directory where you want the results to be located.
    (-m, --map) The tab-delimited qiime mapping file that contains metadata for the samples to be analyzed. The BarcodeSequence column should be empty.
    Optional Parameters:
    (-r, --reference) Reference database for OTU clustering. It should be in fasta format. If a reference is given, pick_open_reference_otus.py runs. If not, pick_de_novo_otus.py runs.
    (-n, --num_cpus) The number of cores to use for the parallel portions of the pipeline. [default: 2].
    Other options: 
    (-h, --help) Display this help dialogue and exit.
    For complete information about this pipeline, please refer to the manual.


